/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description health check */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @default ok */
                            message: string;
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/problem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    contestId?: string[];
                    category?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get problems */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            problems?: string[];
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        q?: string;
                        limit?: number;
                        page?: number;
                        sort?: ("startAt:asc" | "startAt:desc" | "difficulty:asc" | "difficulty:desc" | "problemId:asc" | "problemId:desc")[];
                        facet?: ("category" | "difficulty")[];
                        category?: string[];
                        difficulty?: components["schemas"]["IntRange"];
                        experimental?: boolean;
                        userId?: string;
                    };
                };
            };
            responses: {
                /** @description Search problems */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            time: number;
                            total: number;
                            pages: number;
                            index: number;
                            items: components["schemas"]["Problem"][];
                            facet: {
                                [key: string]: components["schemas"]["Count"][];
                            };
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        q?: string;
                        limit?: number;
                        page?: number;
                        sort?: ("rating:asc" | "rating:desc" | "birthYear:asc" | "birthYear:desc" | "joinCount:asc" | "joinCount:desc" | "userId:asc" | "userId:desc" | "rank:asc" | "rank:desc" | "accepted:asc" | "accepted:desc" | "submissionCount:asc" | "submissionCount:desc")[];
                        facet?: ("country" | "rating" | "birthYear" | "joinCount")[];
                        userId?: string[];
                        rating?: components["schemas"]["IntRange"];
                        birthYear?: components["schemas"]["IntRange"];
                        joinCount?: components["schemas"]["IntRange"];
                        country?: string[];
                    };
                };
            };
            responses: {
                /** @description Search users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            time: number;
                            total: number;
                            pages: number;
                            index: number;
                            items: components["schemas"]["User"][];
                            facet: {
                                [key: string]: components["schemas"]["Count"][];
                            };
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/submission": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        limit?: number;
                        page?: number;
                        sort?: ("executionTime:asc" | "executionTime:desc" | "epochSecond:asc" | "epochSecond:desc" | "point:asc" | "point:desc" | "length:asc" | "length:desc")[];
                        epochSecond?: components["schemas"]["IntRange"];
                        problemId?: string[];
                        contestId?: string[];
                        category?: string[];
                        userId?: string[];
                        language?: string[];
                        languageGroup?: string[];
                        point?: components["schemas"]["FloatRange"];
                        length?: components["schemas"]["IntRange"];
                        result?: string[];
                        executionTime?: components["schemas"]["IntRange"];
                    };
                };
            };
            responses: {
                /** @description Search submissions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            time: number;
                            index: number;
                            items: components["schemas"]["Submission"][];
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get categories */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            categories?: string[];
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    category?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get contests */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            contests?: string[];
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    group?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Get languages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            languages?: components["schemas"]["Language"][];
                        };
                    };
                };
                /** @description Bad request */
                default: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Count: {
            label: string;
            count: number;
        };
        IntRange: {
            from?: number;
            to?: number;
        };
        FloatRange: {
            from?: number;
            to?: number;
        };
        Problem: {
            problemId: string;
            problemTitle: string;
            problemUrl: string;
            contestId: string;
            contestTitle: string;
            contestUrl: string;
            difficulty?: number;
            startAt: number;
            duration: number;
            rateChange: string;
            category: string;
            isExperimental: boolean;
        };
        User: {
            userId: string;
            rating: number;
            highestRating: number;
            affiliation?: string;
            birthYear?: number;
            country?: string;
            crown?: string;
            joinCount: number;
            rank: number;
            activeRank?: number;
            wins: number;
            userUrl: string;
            accepted: number;
            submissionCount: number;
        };
        Submission: {
            submissionId: number;
            submittedAt: number;
            submissionUrl: string;
            problemId: string;
            problemTitle: string;
            problemUrl: string;
            contestId: string;
            contestTitle: string;
            contestUrl: string;
            category: string;
            difficulty?: number;
            userId: string;
            language: string;
            languageGroup: string;
            point: number;
            length: number;
            result: string;
            executionTime?: number;
        };
        Language: {
            group: string;
            languages?: string[];
        };
        ErrorResponse: {
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
