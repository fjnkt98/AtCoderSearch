openapi: 3.0.0
info:
  title: AtCoder Search Backend API
  description: AtCoder Search backend API
  version: 0.1.3
paths:
  /api/search/problem:
    get:
      summary: Search problems
      description: Search problems
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
            maxLength: 200
          description: The search keyword.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
          description: Maximum number of search results per page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: |
            The page index of search results.  
            [Caution] If a large value is specified, API server may be overloaded.
        - in: query
          name: filter.category
          schema:
            type: string
          example: "ABC,ARC"
          description: Filter by contest type. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.difficulty.from
          schema:
            type: integer
          example: 1000
          description: Filter by problem difficulty.
        - in: query
          name: filter.difficulty.to
          schema:
            type: integer
          example: 2000
          description: Filter by problem difficulty.
        - in: query
          name: filter.color
          schema:
            type: string
          example: green
          description: Filter by problem difficulty specified by color.
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - "start_at"
              - "-start_at"
              - "difficulty"
              - "-difficulty"
              - "-score"
            default: -start_at
            description: Sort the search result.
        - in: query
          name: facet.term
          schema:
            type: string
            enum:
              - category
              - color
          example: "category,color"
          description: Facetting by term. Multiple values can be specified by separating them with comma.
        - in: query
          name: facet.difficulty.from
          schema:
            type: number
          example: "0"
          description: Facetting by difficulty. If facet.difficulty.from, facet.difficulty.to, or facet.difficulty.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.difficulty.to
          schema:
            type: number
          example: "2800"
          description: Facetting by difficulty. If facet.difficulty.from, facet.difficulty.to, or facet.difficulty.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.difficulty.gap
          schema:
            type: number
          example: "400"
          description: Facetting by difficulty. If facet.difficulty.from, facet.difficulty.to, or facet.difficulty.gap is unspecified, facet count is not returned.
      responses:
        200:
          description: "Search result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProblemResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchProblemResponse"
  /api/search/user:
    get:
      summary: Search users
      description: Search users
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
            maxLength: 200
          description: The search keyword.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
          description: Maximum number of search results per page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: |
            The page index of search results.  
            [Caution] If a large value is specified, API server may be overloaded.
        - in: query
          name: filter.user_id
          schema:
            type: string
          example: "fjnkt98"
          description: Filter by user id. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.rating.from
          schema:
            type: integer
          description: Filter by user rating.
        - in: query
          name: filter.rating.to
          schema:
            type: integer
          description: Filter by user rating.
        - in: query
          name: filter.birth_year.from
          schema:
            type: string
          example: green
          description: Filter by user birth year.
        - in: query
          name: filter.birth_year.to
          schema:
            type: string
          example: green
          description: Filter by user birth year.
        - in: query
          name: filter.join_count.from
          schema:
            type: string
          example: green
          description: Filter by join count.
        - in: query
          name: filter.join_count.to
          schema:
            type: string
          example: green
          description: Filter by join count.
        - in: query
          name: filter.country
          schema:
            type: string
          example: "JA"
          description: Filter by user country. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.color
          schema:
            type: string
          example: "green"
          description: Filter by user rating specified by color. Multiple values can be specified by separating them with comma.
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - "rating"
              - "-rating"
              - "birth_year"
              - "-birth_year"
              - "-score"
            default: -rating
            description: Sort the search result.
        - in: query
          name: facet.term
          schema:
            type: string
            enum:
              - country
          example: "category,color"
          description: Facetting by term. Multiple values can be specified by separating them with comma.
        - in: query
          name: facet.rating.from
          schema:
            type: number
          description: Facetting by rating. If facet.rating.from, facet.rating.to, or facet.rating.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.rating.to
          schema:
            type: number
          description: Facetting by rating. If facet.rating.from, facet.rating.to, or facet.rating.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.rating.gap
          schema:
            type: number
          description: Facetting by rating. If facet.rating.from, facet.rating.to, or facet.rating.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.birth_year.from
          schema:
            type: number
          description: Facetting by birth_year. If facet.birth_year.from, facet.birth_year.to, or facet.birth_year.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.birth_year.to
          schema:
            type: number
          description: Facetting by birth_year. If facet.birth_year.from, facet.birth_year.to, or facet.birth_year.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.birth_year.gap
          schema:
            type: number
          description: Facetting by birth_year. If facet.birth_year.from, facet.birth_year.to, or facet.birth_year.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.join_count.from
          schema:
            type: number
          description: Facetting by join_count. If facet.join_count.from, facet.join_count.to, or facet.join_count.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.join_count.to
          schema:
            type: number
          description: Facetting by join_count. If facet.join_count.from, facet.join_count.to, or facet.join_count.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.join_count.gap
          schema:
            type: number
          description: Facetting by join_count. If facet.join_count.from, facet.join_count.to, or facet.join_count.gap is unspecified, facet count is not returned.
      responses:
        200:
          description: "Search result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchUserResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchUserResponse"
  /api/search/submission:
    get:
      summary: Search submissions
      description: Search submissions
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 20
          description: Maximum number of search results per page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 1
          description: |
            The page index of search results.  
            [Caution] If a large value is specified, API server may be overloaded.
        - in: query
          name: filter.epoch_second.from
          schema:
            type: integer
          description: Filter by epoch second at which submitted.
        - in: query
          name: filter.epoch_second.to
          schema:
            type: integer
          description: Filter by epoch second at which submitted.
        - in: query
          name: filter.problem_id
          schema:
            type: string
          example: "abc123_a"
          description: Filter by problem id. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.contest_id
          schema:
            type: string
          example: "abc123"
          description: Filter by contest id. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.category
          schema:
            type: string
          example: "ABC"
          description: Filter by contest category. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.user_id
          schema:
            type: string
          example: "fjnkt98"
          description: Filter by user id. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.language
          schema:
            type: string
          example: "C++ (GCC 9.2.1)"
          description: Filter by language. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.point.from
          schema:
            type: integer
          description: Filter by point of submission.
        - in: query
          name: filter.point.to
          schema:
            type: integer
          description: Filter by point of submission.
        - in: query
          name: filter.length.from
          schema:
            type: integer
          description: Filter by length of submission.
        - in: query
          name: filter.length.to
          schema:
            type: integer
          description: Filter by length of submission.
        - in: query
          name: filter.result
          schema:
            type: string
          example: "AC"
          description: Filter by result. Multiple values can be specified by separating them with comma.
        - in: query
          name: filter.execution_time.from
          schema:
            type: integer
          description: Filter by execution_time of submission.
        - in: query
          name: filter.execution_time.to
          schema:
            type: integer
          description: Filter by execution_time of submission.
        - in: query
          name: sort
          schema:
            type: string
            enum:
              - "execution_time"
              - "-execution_time"
              - "submitted_at"
              - "-submitted_at"
              - "point"
              - "-point"
              - "length"
              - "-length"
            default: -submitted_at
            description: Sort the search result.
        - in: query
          name: facet.term
          schema:
            type: string
            enum:
              - problem_id
              - user_id
              - contest_id
              - language
              - result
          description: Facetting by term. Multiple values can be specified by separating them with comma.
        - in: query
          name: facet.length.from
          schema:
            type: number
          example: "0"
          description: Facetting by length. If facet.length.from, facet.length.to, or facet.length.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.length.to
          schema:
            type: number
          example: "2800"
          description: Facetting by length. If facet.length.from, facet.length.to, or facet.length.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.length.gap
          schema:
            type: number
          example: "400"
          description: Facetting by length. If facet.length.from, facet.length.to, or facet.length.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.execution_time.from
          schema:
            type: number
          example: "0"
          description: Facetting by execution_time. If facet.execution_time.from, facet.execution_time.to, or facet.execution_time.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.execution_time.to
          schema:
            type: number
          example: "2800"
          description: Facetting by execution_time. If facet.execution_time.from, facet.execution_time.to, or facet.execution_time.gap is unspecified, facet count is not returned.
        - in: query
          name: facet.execution_time.gap
          schema:
            type: number
          example: "400"
          description: Facetting by execution_time. If facet.execution_time.from, facet.execution_time.to, or facet.execution_time.gap is unspecified, facet count is not returned.
      responses:
        200:
          description: "Search result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSubmissionResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchSubmissionResponse"
  /api/recommend/problem:
    get:
      summary: Recommend problems
      description: Recommend problems
      parameters:
        - in: query
          name: model
          schema:
            type: number
            enum:
              - 1
              - 2
              - 3
          description: Recommend model. Only model 2 works currently.
          required: true
        - in: query
          name: option
          schema:
            type: string
          description: Recommendation option represented by 4-digit number. Recommendation changes according to each digit. When omitted, default option will be used.
        - in: query
          name: user_id
          schema:
            type: string
          description: The user id for recommendation.
        - in: query
          name: rating
          schema:
            type: number
          description: The user rating for recommendation. If a user ID is specified, the rating of that user will be used.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 20
          description: Maximum number of search results per page.
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: unsolved
          schema:
            type: boolean
            default: false
          description: If true, only problems that have not been solved by the user are recommended.
      responses:
        200:
          description: "Search result"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecommendProblemResponse"
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecommendProblemResponse"
  /api/list/category:
    get:
      summary: List categories of contest
      description: List category of contest
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/list/language:
    get:
      summary: List languages
      description: List languages
      responses:
        200:
          description: List of languages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/list/contest:
    get:
      summary: List contests
      description: List contests
      parameters:
        - in: query
          name: category
          schema:
            type: string
      responses:
        200:
          description: List of contests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/list/problem:
    get:
      summary: List problems
      description: List problems
      parameters:
        - in: query
          name: contest_id
          schema:
            type: string
      responses:
        200:
          description: List of problems
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
components:
  schemas:
    SearchProblemResponse:
      type: object
      properties:
        stats:
          type: object
          properties:
            time:
              type: integer
            total:
              type: integer
            index:
              type: integer
            pages:
              type: integer
            count:
              type: integer
            params:
              type: object
            facet:
              type: object
              properties:
                category:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                difficulty:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                color:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                  required:
                    - time
                    - total
                    - index
                    - pages
                    - count
                items:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/Problem"
        message:
          type: string
          description: The error message
      required:
        - stats
        - items
    FacetPart:
      type: object
      properties:
        label:
          type: string
        count:
          type: number
    Problem:
      type: object
      properties:
        problem_id:
          type: string
        problem_title:
          type: string
        problem_url:
          type: string
          format: uri
        contest_id:
          type: string
        contest_title:
          type: string
        contest_url:
          type: string
          format: uri
        difficulty:
          type: integer
        start_at:
          type: string
          format: date-time
        duration:
          type: integer
        rate_change:
          type: string
        category:
          type: string
    SearchUserResponse:
      type: object
      properties:
        stats:
          type: object
          properties:
            time:
              type: integer
            total:
              type: integer
            index:
              type: integer
            pages:
              type: integer
            count:
              type: integer
            params:
              type: object
            facet:
              type: object
              properties:
                rating:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                birth_year:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                join_count:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                country:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
        items:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/User"
        message:
          type: string
          description: The error message
      required:
        - stats
        - items
    User:
      type: object
      properties:
        user_name:
          type: string
        rating:
          type: number
        highest_rating:
          type: number
        affiliation:
          type: string
        birth_year:
          type: number
        country:
          type: string
        crown:
          type: string
        join_count:
          type: number
        rank:
          type: number
        active_rank:
          type: number
        wins:
          type: number
        color:
          type: string
        user_url:
          type: string
          format: uri
    SearchSubmissionResponse:
      type: object
      properties:
        stats:
          type: object
          properties:
            time:
              type: integer
            total:
              type: integer
            index:
              type: integer
            pages:
              type: integer
            count:
              type: integer
            params:
              type: object
            facet:
              type: object
              properties:
                contest_id:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                problem_id:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                user_id:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                language:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                result:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                length:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
                execution_time:
                  type: array
                  items:
                    type: object
                    $ref: "#/components/schemas/FacetPart"
        items:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Submission"
        message:
          type: string
          description: The error message
      required:
        - stats
        - items
    Submission:
      type: object
      properties:
        submission_id:
          type: number
        submitted_at:
          type: string
          format: date-time
        submission_url:
          type: string
        problem_id:
          type: string
        problem_title:
          type: string
        contest_id:
          type: string
        contest_title:
          type: string
        category:
          type: string
        difficulty:
          type: number
        color:
          type: string
        user_id:
          type: string
        language:
          type: string
        point:
          type: number
        length:
          type: number
        result:
          type: string
        execution_time:
          type: number
    RecommendProblemResponse:
      type: object
      properties:
        stats:
          type: object
          properties:
            time:
              type: integer
            total:
              type: integer
            index:
              type: integer
            pages:
              type: integer
            count:
              type: integer
            params:
              type: object
        items:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/Problem"
        message:
          type: string
          description: The error message
      required:
        - stats
        - items
