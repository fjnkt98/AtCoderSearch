// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: atcodersearch/v1/atcodersearch.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{0}
}

func (x *Count) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Count) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *int64 `protobuf:"varint,1,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To   *int64 `protobuf:"varint,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetFrom() int64 {
	if x != nil && x.From != nil {
		return *x.From
	}
	return 0
}

func (x *Range) GetTo() int64 {
	if x != nil && x.To != nil {
		return *x.To
	}
	return 0
}

type SearchProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        *int64   `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Page         *int64   `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	Sorts        []string `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Q            string   `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Facets       []string `protobuf:"bytes,5,rep,name=facets,proto3" json:"facets,omitempty"`
	Categories   []string `protobuf:"bytes,6,rep,name=categories,proto3" json:"categories,omitempty"`
	Difficulty   *Range   `protobuf:"bytes,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Colors       []string `protobuf:"bytes,8,rep,name=colors,proto3" json:"colors,omitempty"`
	Experimental *bool    `protobuf:"varint,9,opt,name=experimental,proto3,oneof" json:"experimental,omitempty"`
}

func (x *SearchProblemRequest) Reset() {
	*x = SearchProblemRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProblemRequest) ProtoMessage() {}

func (x *SearchProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProblemRequest.ProtoReflect.Descriptor instead.
func (*SearchProblemRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{2}
}

func (x *SearchProblemRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchProblemRequest) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *SearchProblemRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SearchProblemRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchProblemRequest) GetFacets() []string {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *SearchProblemRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SearchProblemRequest) GetDifficulty() *Range {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *SearchProblemRequest) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *SearchProblemRequest) GetExperimental() bool {
	if x != nil && x.Experimental != nil {
		return *x.Experimental
	}
	return false
}

type SearchProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64         `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Index int64         `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Count int64         `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Pages int64         `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Items []*Problem    `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	Facet *ProblemFacet `protobuf:"bytes,7,opt,name=facet,proto3" json:"facet,omitempty"`
}

func (x *SearchProblemResponse) Reset() {
	*x = SearchProblemResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProblemResponse) ProtoMessage() {}

func (x *SearchProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProblemResponse.ProtoReflect.Descriptor instead.
func (*SearchProblemResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{3}
}

func (x *SearchProblemResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchProblemResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchProblemResponse) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SearchProblemResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchProblemResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *SearchProblemResponse) GetItems() []*Problem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchProblemResponse) GetFacet() *ProblemFacet {
	if x != nil {
		return x.Facet
	}
	return nil
}

type ProblemFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories   []*Count `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	Difficulties []*Count `protobuf:"bytes,2,rep,name=difficulties,proto3" json:"difficulties,omitempty"`
}

func (x *ProblemFacet) Reset() {
	*x = ProblemFacet{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProblemFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProblemFacet) ProtoMessage() {}

func (x *ProblemFacet) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProblemFacet.ProtoReflect.Descriptor instead.
func (*ProblemFacet) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{4}
}

func (x *ProblemFacet) GetCategories() []*Count {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *ProblemFacet) GetDifficulties() []*Count {
	if x != nil {
		return x.Difficulties
	}
	return nil
}

type Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemId    string  `protobuf:"bytes,1,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	ProblemTitle string  `protobuf:"bytes,2,opt,name=problem_title,json=problemTitle,proto3" json:"problem_title,omitempty"`
	ProblemUrl   string  `protobuf:"bytes,3,opt,name=problem_url,json=problemUrl,proto3" json:"problem_url,omitempty"`
	ContestId    string  `protobuf:"bytes,4,opt,name=contest_id,json=contestId,proto3" json:"contest_id,omitempty"`
	ContestTitle string  `protobuf:"bytes,5,opt,name=contest_title,json=contestTitle,proto3" json:"contest_title,omitempty"`
	ContestUrl   string  `protobuf:"bytes,6,opt,name=contest_url,json=contestUrl,proto3" json:"contest_url,omitempty"`
	Difficulty   *int64  `protobuf:"varint,7,opt,name=difficulty,proto3,oneof" json:"difficulty,omitempty"`
	Color        *string `protobuf:"bytes,8,opt,name=color,proto3,oneof" json:"color,omitempty"`
	StartAt      int64   `protobuf:"varint,9,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	Duration     int64   `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	RateChange   string  `protobuf:"bytes,11,opt,name=rate_change,json=rateChange,proto3" json:"rate_change,omitempty"`
	Category     string  `protobuf:"bytes,12,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Problem) Reset() {
	*x = Problem{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Problem) ProtoMessage() {}

func (x *Problem) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Problem.ProtoReflect.Descriptor instead.
func (*Problem) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{5}
}

func (x *Problem) GetProblemId() string {
	if x != nil {
		return x.ProblemId
	}
	return ""
}

func (x *Problem) GetProblemTitle() string {
	if x != nil {
		return x.ProblemTitle
	}
	return ""
}

func (x *Problem) GetProblemUrl() string {
	if x != nil {
		return x.ProblemUrl
	}
	return ""
}

func (x *Problem) GetContestId() string {
	if x != nil {
		return x.ContestId
	}
	return ""
}

func (x *Problem) GetContestTitle() string {
	if x != nil {
		return x.ContestTitle
	}
	return ""
}

func (x *Problem) GetContestUrl() string {
	if x != nil {
		return x.ContestUrl
	}
	return ""
}

func (x *Problem) GetDifficulty() int64 {
	if x != nil && x.Difficulty != nil {
		return *x.Difficulty
	}
	return 0
}

func (x *Problem) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *Problem) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Problem) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Problem) GetRateChange() string {
	if x != nil {
		return x.RateChange
	}
	return ""
}

func (x *Problem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type SearchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     *int64   `protobuf:"varint,1,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Page      *int64   `protobuf:"varint,2,opt,name=page,proto3,oneof" json:"page,omitempty"`
	Sorts     []string `protobuf:"bytes,3,rep,name=sorts,proto3" json:"sorts,omitempty"`
	Q         string   `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Facets    []string `protobuf:"bytes,5,rep,name=facets,proto3" json:"facets,omitempty"`
	UserIds   []string `protobuf:"bytes,6,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	Rating    *Range   `protobuf:"bytes,7,opt,name=rating,proto3" json:"rating,omitempty"`
	BirthYear *Range   `protobuf:"bytes,8,opt,name=birth_year,json=birthYear,proto3" json:"birth_year,omitempty"`
	JoinCount *Range   `protobuf:"bytes,9,opt,name=join_count,json=joinCount,proto3" json:"join_count,omitempty"`
	Countries []string `protobuf:"bytes,10,rep,name=countries,proto3" json:"countries,omitempty"`
	Colors    []string `protobuf:"bytes,11,rep,name=colors,proto3" json:"colors,omitempty"`
}

func (x *SearchUserRequest) Reset() {
	*x = SearchUserRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRequest) ProtoMessage() {}

func (x *SearchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRequest.ProtoReflect.Descriptor instead.
func (*SearchUserRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{6}
}

func (x *SearchUserRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *SearchUserRequest) GetPage() int64 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *SearchUserRequest) GetSorts() []string {
	if x != nil {
		return x.Sorts
	}
	return nil
}

func (x *SearchUserRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchUserRequest) GetFacets() []string {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *SearchUserRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SearchUserRequest) GetRating() *Range {
	if x != nil {
		return x.Rating
	}
	return nil
}

func (x *SearchUserRequest) GetBirthYear() *Range {
	if x != nil {
		return x.BirthYear
	}
	return nil
}

func (x *SearchUserRequest) GetJoinCount() *Range {
	if x != nil {
		return x.JoinCount
	}
	return nil
}

func (x *SearchUserRequest) GetCountries() []string {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *SearchUserRequest) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

type SearchUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64      `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Total int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Index int64      `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Count int64      `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Pages int64      `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Items []*User    `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
	Facet *UserFacet `protobuf:"bytes,7,opt,name=facet,proto3" json:"facet,omitempty"`
}

func (x *SearchUserResponse) Reset() {
	*x = SearchUserResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserResponse) ProtoMessage() {}

func (x *SearchUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserResponse.ProtoReflect.Descriptor instead.
func (*SearchUserResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{7}
}

func (x *SearchUserResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SearchUserResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserResponse) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SearchUserResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SearchUserResponse) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *SearchUserResponse) GetItems() []*User {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchUserResponse) GetFacet() *UserFacet {
	if x != nil {
		return x.Facet
	}
	return nil
}

type UserFacet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Countries  []*Count `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
	Ratings    []*Count `protobuf:"bytes,2,rep,name=ratings,proto3" json:"ratings,omitempty"`
	BirthYears []*Count `protobuf:"bytes,3,rep,name=birth_years,json=birthYears,proto3" json:"birth_years,omitempty"`
	JoinCounts []*Count `protobuf:"bytes,4,rep,name=join_counts,json=joinCounts,proto3" json:"join_counts,omitempty"`
}

func (x *UserFacet) Reset() {
	*x = UserFacet{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserFacet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserFacet) ProtoMessage() {}

func (x *UserFacet) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserFacet.ProtoReflect.Descriptor instead.
func (*UserFacet) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{8}
}

func (x *UserFacet) GetCountries() []*Count {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *UserFacet) GetRatings() []*Count {
	if x != nil {
		return x.Ratings
	}
	return nil
}

func (x *UserFacet) GetBirthYears() []*Count {
	if x != nil {
		return x.BirthYears
	}
	return nil
}

func (x *UserFacet) GetJoinCounts() []*Count {
	if x != nil {
		return x.JoinCounts
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Rating        int64   `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	HighestRating int64   `protobuf:"varint,3,opt,name=highest_rating,json=highestRating,proto3" json:"highest_rating,omitempty"`
	Affiliation   *int64  `protobuf:"varint,4,opt,name=affiliation,proto3,oneof" json:"affiliation,omitempty"`
	BirthYear     *int64  `protobuf:"varint,5,opt,name=birth_year,json=birthYear,proto3,oneof" json:"birth_year,omitempty"`
	Country       *string `protobuf:"bytes,6,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Crown         *string `protobuf:"bytes,7,opt,name=crown,proto3,oneof" json:"crown,omitempty"`
	JoinCount     int64   `protobuf:"varint,8,opt,name=join_count,json=joinCount,proto3" json:"join_count,omitempty"`
	Rank          int64   `protobuf:"varint,9,opt,name=rank,proto3" json:"rank,omitempty"`
	ActiveRank    *int64  `protobuf:"varint,10,opt,name=active_rank,json=activeRank,proto3,oneof" json:"active_rank,omitempty"`
	Wins          int64   `protobuf:"varint,11,opt,name=wins,proto3" json:"wins,omitempty"`
	Color         string  `protobuf:"bytes,12,opt,name=color,proto3" json:"color,omitempty"`
	UserUrl       string  `protobuf:"bytes,13,opt,name=user_url,json=userUrl,proto3" json:"user_url,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{9}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *User) GetHighestRating() int64 {
	if x != nil {
		return x.HighestRating
	}
	return 0
}

func (x *User) GetAffiliation() int64 {
	if x != nil && x.Affiliation != nil {
		return *x.Affiliation
	}
	return 0
}

func (x *User) GetBirthYear() int64 {
	if x != nil && x.BirthYear != nil {
		return *x.BirthYear
	}
	return 0
}

func (x *User) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *User) GetCrown() string {
	if x != nil && x.Crown != nil {
		return *x.Crown
	}
	return ""
}

func (x *User) GetJoinCount() int64 {
	if x != nil {
		return x.JoinCount
	}
	return 0
}

func (x *User) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *User) GetActiveRank() int64 {
	if x != nil && x.ActiveRank != nil {
		return *x.ActiveRank
	}
	return 0
}

func (x *User) GetWins() int64 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *User) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *User) GetUserUrl() string {
	if x != nil {
		return x.UserUrl
	}
	return ""
}

type SearchSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchSubmissionRequest) Reset() {
	*x = SearchSubmissionRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubmissionRequest) ProtoMessage() {}

func (x *SearchSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubmissionRequest.ProtoReflect.Descriptor instead.
func (*SearchSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{10}
}

type SearchSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchSubmissionResponse) Reset() {
	*x = SearchSubmissionResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubmissionResponse) ProtoMessage() {}

func (x *SearchSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubmissionResponse.ProtoReflect.Descriptor instead.
func (*SearchSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{11}
}

type GetCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCategoryResponse) Reset() {
	*x = GetCategoryResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryResponse) ProtoMessage() {}

func (x *GetCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{12}
}

func (x *GetCategoryResponse) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetContestRequest) Reset() {
	*x = GetContestRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestRequest) ProtoMessage() {}

func (x *GetContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestRequest.ProtoReflect.Descriptor instead.
func (*GetContestRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{13}
}

func (x *GetContestRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetContestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contests []string `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
}

func (x *GetContestResponse) Reset() {
	*x = GetContestResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContestResponse) ProtoMessage() {}

func (x *GetContestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContestResponse.ProtoReflect.Descriptor instead.
func (*GetContestResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{14}
}

func (x *GetContestResponse) GetContests() []string {
	if x != nil {
		return x.Contests
	}
	return nil
}

type GetLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *GetLanguageRequest) Reset() {
	*x = GetLanguageRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageRequest) ProtoMessage() {}

func (x *GetLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{15}
}

func (x *GetLanguageRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Languages []string `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty"`
}

func (x *GetLanguageResponse) Reset() {
	*x = GetLanguageResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageResponse) ProtoMessage() {}

func (x *GetLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{16}
}

func (x *GetLanguageResponse) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

type GetProblemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contests   []string `protobuf:"bytes,1,rep,name=contests,proto3" json:"contests,omitempty"`
	Categories []string `protobuf:"bytes,2,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetProblemRequest) Reset() {
	*x = GetProblemRequest{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemRequest) ProtoMessage() {}

func (x *GetProblemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemRequest.ProtoReflect.Descriptor instead.
func (*GetProblemRequest) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{17}
}

func (x *GetProblemRequest) GetContests() []string {
	if x != nil {
		return x.Contests
	}
	return nil
}

func (x *GetProblemRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type GetProblemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problems []string `protobuf:"bytes,1,rep,name=problems,proto3" json:"problems,omitempty"`
}

func (x *GetProblemResponse) Reset() {
	*x = GetProblemResponse{}
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProblemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProblemResponse) ProtoMessage() {}

func (x *GetProblemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_atcodersearch_v1_atcodersearch_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProblemResponse.ProtoReflect.Descriptor instead.
func (*GetProblemResponse) Descriptor() ([]byte, []int) {
	return file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP(), []int{18}
}

func (x *GetProblemResponse) GetProblems() []string {
	if x != nil {
		return x.Problems
	}
	return nil
}

var File_atcodersearch_v1_atcodersearch_proto protoreflect.FileDescriptor

var file_atcodersearch_v1_atcodersearch_proto_rawDesc = []byte{
	0x0a, 0x24, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x05, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74,
	0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75,
	0x6c, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2f,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x05,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x0c, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x22, 0xa0, 0x03, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69,
	0x63, 0x75, 0x6c, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x88, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x36, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x12, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x22, 0xe9,
	0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a,
	0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xc6, 0x03, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0b, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0b, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59,
	0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72,
	0x61, 0x6e, 0x6b, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x72,
	0x6f, 0x77, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a,
	0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x30, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x73, 0x32, 0x91,
	0x05, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x60, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x12, 0x26, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x74, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x74, 0x63,
	0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e,
	0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x61,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x23, 0x2e, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x66, 0x6a, 0x6e, 0x6b, 0x74, 0x39, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_atcodersearch_v1_atcodersearch_proto_rawDescOnce sync.Once
	file_atcodersearch_v1_atcodersearch_proto_rawDescData = file_atcodersearch_v1_atcodersearch_proto_rawDesc
)

func file_atcodersearch_v1_atcodersearch_proto_rawDescGZIP() []byte {
	file_atcodersearch_v1_atcodersearch_proto_rawDescOnce.Do(func() {
		file_atcodersearch_v1_atcodersearch_proto_rawDescData = protoimpl.X.CompressGZIP(file_atcodersearch_v1_atcodersearch_proto_rawDescData)
	})
	return file_atcodersearch_v1_atcodersearch_proto_rawDescData
}

var file_atcodersearch_v1_atcodersearch_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_atcodersearch_v1_atcodersearch_proto_goTypes = []any{
	(*Count)(nil),                    // 0: atcodersearch.v1.Count
	(*Range)(nil),                    // 1: atcodersearch.v1.Range
	(*SearchProblemRequest)(nil),     // 2: atcodersearch.v1.SearchProblemRequest
	(*SearchProblemResponse)(nil),    // 3: atcodersearch.v1.SearchProblemResponse
	(*ProblemFacet)(nil),             // 4: atcodersearch.v1.ProblemFacet
	(*Problem)(nil),                  // 5: atcodersearch.v1.Problem
	(*SearchUserRequest)(nil),        // 6: atcodersearch.v1.SearchUserRequest
	(*SearchUserResponse)(nil),       // 7: atcodersearch.v1.SearchUserResponse
	(*UserFacet)(nil),                // 8: atcodersearch.v1.UserFacet
	(*User)(nil),                     // 9: atcodersearch.v1.User
	(*SearchSubmissionRequest)(nil),  // 10: atcodersearch.v1.SearchSubmissionRequest
	(*SearchSubmissionResponse)(nil), // 11: atcodersearch.v1.SearchSubmissionResponse
	(*GetCategoryResponse)(nil),      // 12: atcodersearch.v1.GetCategoryResponse
	(*GetContestRequest)(nil),        // 13: atcodersearch.v1.GetContestRequest
	(*GetContestResponse)(nil),       // 14: atcodersearch.v1.GetContestResponse
	(*GetLanguageRequest)(nil),       // 15: atcodersearch.v1.GetLanguageRequest
	(*GetLanguageResponse)(nil),      // 16: atcodersearch.v1.GetLanguageResponse
	(*GetProblemRequest)(nil),        // 17: atcodersearch.v1.GetProblemRequest
	(*GetProblemResponse)(nil),       // 18: atcodersearch.v1.GetProblemResponse
	(*emptypb.Empty)(nil),            // 19: google.protobuf.Empty
}
var file_atcodersearch_v1_atcodersearch_proto_depIdxs = []int32{
	1,  // 0: atcodersearch.v1.SearchProblemRequest.difficulty:type_name -> atcodersearch.v1.Range
	5,  // 1: atcodersearch.v1.SearchProblemResponse.items:type_name -> atcodersearch.v1.Problem
	4,  // 2: atcodersearch.v1.SearchProblemResponse.facet:type_name -> atcodersearch.v1.ProblemFacet
	0,  // 3: atcodersearch.v1.ProblemFacet.categories:type_name -> atcodersearch.v1.Count
	0,  // 4: atcodersearch.v1.ProblemFacet.difficulties:type_name -> atcodersearch.v1.Count
	1,  // 5: atcodersearch.v1.SearchUserRequest.rating:type_name -> atcodersearch.v1.Range
	1,  // 6: atcodersearch.v1.SearchUserRequest.birth_year:type_name -> atcodersearch.v1.Range
	1,  // 7: atcodersearch.v1.SearchUserRequest.join_count:type_name -> atcodersearch.v1.Range
	9,  // 8: atcodersearch.v1.SearchUserResponse.items:type_name -> atcodersearch.v1.User
	8,  // 9: atcodersearch.v1.SearchUserResponse.facet:type_name -> atcodersearch.v1.UserFacet
	0,  // 10: atcodersearch.v1.UserFacet.countries:type_name -> atcodersearch.v1.Count
	0,  // 11: atcodersearch.v1.UserFacet.ratings:type_name -> atcodersearch.v1.Count
	0,  // 12: atcodersearch.v1.UserFacet.birth_years:type_name -> atcodersearch.v1.Count
	0,  // 13: atcodersearch.v1.UserFacet.join_counts:type_name -> atcodersearch.v1.Count
	2,  // 14: atcodersearch.v1.SearchService.SearchProblem:input_type -> atcodersearch.v1.SearchProblemRequest
	6,  // 15: atcodersearch.v1.SearchService.SearchUser:input_type -> atcodersearch.v1.SearchUserRequest
	10, // 16: atcodersearch.v1.SearchService.SearchSubmission:input_type -> atcodersearch.v1.SearchSubmissionRequest
	19, // 17: atcodersearch.v1.SearchService.GetCategory:input_type -> google.protobuf.Empty
	13, // 18: atcodersearch.v1.SearchService.GetContest:input_type -> atcodersearch.v1.GetContestRequest
	15, // 19: atcodersearch.v1.SearchService.GetLanguage:input_type -> atcodersearch.v1.GetLanguageRequest
	17, // 20: atcodersearch.v1.SearchService.GetProblem:input_type -> atcodersearch.v1.GetProblemRequest
	3,  // 21: atcodersearch.v1.SearchService.SearchProblem:output_type -> atcodersearch.v1.SearchProblemResponse
	7,  // 22: atcodersearch.v1.SearchService.SearchUser:output_type -> atcodersearch.v1.SearchUserResponse
	11, // 23: atcodersearch.v1.SearchService.SearchSubmission:output_type -> atcodersearch.v1.SearchSubmissionResponse
	12, // 24: atcodersearch.v1.SearchService.GetCategory:output_type -> atcodersearch.v1.GetCategoryResponse
	14, // 25: atcodersearch.v1.SearchService.GetContest:output_type -> atcodersearch.v1.GetContestResponse
	16, // 26: atcodersearch.v1.SearchService.GetLanguage:output_type -> atcodersearch.v1.GetLanguageResponse
	18, // 27: atcodersearch.v1.SearchService.GetProblem:output_type -> atcodersearch.v1.GetProblemResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_atcodersearch_v1_atcodersearch_proto_init() }
func file_atcodersearch_v1_atcodersearch_proto_init() {
	if File_atcodersearch_v1_atcodersearch_proto != nil {
		return
	}
	file_atcodersearch_v1_atcodersearch_proto_msgTypes[1].OneofWrappers = []any{}
	file_atcodersearch_v1_atcodersearch_proto_msgTypes[2].OneofWrappers = []any{}
	file_atcodersearch_v1_atcodersearch_proto_msgTypes[5].OneofWrappers = []any{}
	file_atcodersearch_v1_atcodersearch_proto_msgTypes[6].OneofWrappers = []any{}
	file_atcodersearch_v1_atcodersearch_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_atcodersearch_v1_atcodersearch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_atcodersearch_v1_atcodersearch_proto_goTypes,
		DependencyIndexes: file_atcodersearch_v1_atcodersearch_proto_depIdxs,
		MessageInfos:      file_atcodersearch_v1_atcodersearch_proto_msgTypes,
	}.Build()
	File_atcodersearch_v1_atcodersearch_proto = out.File
	file_atcodersearch_v1_atcodersearch_proto_rawDesc = nil
	file_atcodersearch_v1_atcodersearch_proto_goTypes = nil
	file_atcodersearch_v1_atcodersearch_proto_depIdxs = nil
}
