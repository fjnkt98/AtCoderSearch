// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// APIContestGetParams is parameters of GET /api/contest operation.
type APIContestGetParams struct {
	Category []string
}

func unpackAPIContestGetParams(packed middleware.Parameters) (params APIContestGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Category = v.([]string)
		}
	}
	return params
}

func decodeAPIContestGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIContestGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotCategoryVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotCategoryVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Category = append(params.Category, paramsDotCategoryVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APILanguageGetParams is parameters of GET /api/language operation.
type APILanguageGetParams struct {
	Group []string
}

func unpackAPILanguageGetParams(packed middleware.Parameters) (params APILanguageGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.([]string)
		}
	}
	return params
}

func decodeAPILanguageGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APILanguageGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotGroupVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotGroupVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Group = append(params.Group, paramsDotGroupVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// APIProblemGetParams is parameters of GET /api/problem operation.
type APIProblemGetParams struct {
	ContestId []string
	Category  []string
}

func unpackAPIProblemGetParams(packed middleware.Parameters) (params APIProblemGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "contestId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ContestId = v.([]string)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Category = v.([]string)
		}
	}
	return params
}

func decodeAPIProblemGetParams(args [0]string, argsEscaped bool, r *http.Request) (params APIProblemGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: contestId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "contestId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotContestIdVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotContestIdVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ContestId = append(params.ContestId, paramsDotContestIdVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contestId",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotCategoryVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotCategoryVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Category = append(params.Category, paramsDotCategoryVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
