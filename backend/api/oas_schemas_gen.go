// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

type APICategoryGetOK struct {
	Categories []string `json:"categories"`
}

// GetCategories returns the value of Categories.
func (s *APICategoryGetOK) GetCategories() []string {
	return s.Categories
}

// SetCategories sets the value of Categories.
func (s *APICategoryGetOK) SetCategories(val []string) {
	s.Categories = val
}

type APIContestGetOK struct {
	Contests []string `json:"contests"`
}

// GetContests returns the value of Contests.
func (s *APIContestGetOK) GetContests() []string {
	return s.Contests
}

// SetContests sets the value of Contests.
func (s *APIContestGetOK) SetContests(val []string) {
	s.Contests = val
}

type APILanguageGetOK struct {
	Languages []Language `json:"languages"`
}

// GetLanguages returns the value of Languages.
func (s *APILanguageGetOK) GetLanguages() []Language {
	return s.Languages
}

// SetLanguages sets the value of Languages.
func (s *APILanguageGetOK) SetLanguages(val []Language) {
	s.Languages = val
}

type APIProblemGetOK struct {
	Problems []string `json:"problems"`
}

// GetProblems returns the value of Problems.
func (s *APIProblemGetOK) GetProblems() []string {
	return s.Problems
}

// SetProblems sets the value of Problems.
func (s *APIProblemGetOK) SetProblems(val []string) {
	s.Problems = val
}

type APIProblemPostOK struct {
	Time  int                   `json:"time"`
	Total int                   `json:"total"`
	Pages int                   `json:"pages"`
	Index int                   `json:"index"`
	Items []Problem             `json:"items"`
	Facet APIProblemPostOKFacet `json:"facet"`
}

// GetTime returns the value of Time.
func (s *APIProblemPostOK) GetTime() int {
	return s.Time
}

// GetTotal returns the value of Total.
func (s *APIProblemPostOK) GetTotal() int {
	return s.Total
}

// GetPages returns the value of Pages.
func (s *APIProblemPostOK) GetPages() int {
	return s.Pages
}

// GetIndex returns the value of Index.
func (s *APIProblemPostOK) GetIndex() int {
	return s.Index
}

// GetItems returns the value of Items.
func (s *APIProblemPostOK) GetItems() []Problem {
	return s.Items
}

// GetFacet returns the value of Facet.
func (s *APIProblemPostOK) GetFacet() APIProblemPostOKFacet {
	return s.Facet
}

// SetTime sets the value of Time.
func (s *APIProblemPostOK) SetTime(val int) {
	s.Time = val
}

// SetTotal sets the value of Total.
func (s *APIProblemPostOK) SetTotal(val int) {
	s.Total = val
}

// SetPages sets the value of Pages.
func (s *APIProblemPostOK) SetPages(val int) {
	s.Pages = val
}

// SetIndex sets the value of Index.
func (s *APIProblemPostOK) SetIndex(val int) {
	s.Index = val
}

// SetItems sets the value of Items.
func (s *APIProblemPostOK) SetItems(val []Problem) {
	s.Items = val
}

// SetFacet sets the value of Facet.
func (s *APIProblemPostOK) SetFacet(val APIProblemPostOKFacet) {
	s.Facet = val
}

type APIProblemPostOKFacet map[string][]Count

func (s *APIProblemPostOKFacet) init() APIProblemPostOKFacet {
	m := *s
	if m == nil {
		m = map[string][]Count{}
		*s = m
	}
	return m
}

type APIProblemPostReq struct {
	Q            OptString                    `json:"q"`
	Limit        OptInt                       `json:"limit"`
	Page         OptInt                       `json:"page"`
	Sort         []APIProblemPostReqSortItem  `json:"sort"`
	Facet        []APIProblemPostReqFacetItem `json:"facet"`
	Category     []string                     `json:"category"`
	Difficulty   OptIntRange                  `json:"difficulty"`
	Experimental OptBool                      `json:"experimental"`
	UserId       OptString                    `json:"userId"`
}

// GetQ returns the value of Q.
func (s *APIProblemPostReq) GetQ() OptString {
	return s.Q
}

// GetLimit returns the value of Limit.
func (s *APIProblemPostReq) GetLimit() OptInt {
	return s.Limit
}

// GetPage returns the value of Page.
func (s *APIProblemPostReq) GetPage() OptInt {
	return s.Page
}

// GetSort returns the value of Sort.
func (s *APIProblemPostReq) GetSort() []APIProblemPostReqSortItem {
	return s.Sort
}

// GetFacet returns the value of Facet.
func (s *APIProblemPostReq) GetFacet() []APIProblemPostReqFacetItem {
	return s.Facet
}

// GetCategory returns the value of Category.
func (s *APIProblemPostReq) GetCategory() []string {
	return s.Category
}

// GetDifficulty returns the value of Difficulty.
func (s *APIProblemPostReq) GetDifficulty() OptIntRange {
	return s.Difficulty
}

// GetExperimental returns the value of Experimental.
func (s *APIProblemPostReq) GetExperimental() OptBool {
	return s.Experimental
}

// GetUserId returns the value of UserId.
func (s *APIProblemPostReq) GetUserId() OptString {
	return s.UserId
}

// SetQ sets the value of Q.
func (s *APIProblemPostReq) SetQ(val OptString) {
	s.Q = val
}

// SetLimit sets the value of Limit.
func (s *APIProblemPostReq) SetLimit(val OptInt) {
	s.Limit = val
}

// SetPage sets the value of Page.
func (s *APIProblemPostReq) SetPage(val OptInt) {
	s.Page = val
}

// SetSort sets the value of Sort.
func (s *APIProblemPostReq) SetSort(val []APIProblemPostReqSortItem) {
	s.Sort = val
}

// SetFacet sets the value of Facet.
func (s *APIProblemPostReq) SetFacet(val []APIProblemPostReqFacetItem) {
	s.Facet = val
}

// SetCategory sets the value of Category.
func (s *APIProblemPostReq) SetCategory(val []string) {
	s.Category = val
}

// SetDifficulty sets the value of Difficulty.
func (s *APIProblemPostReq) SetDifficulty(val OptIntRange) {
	s.Difficulty = val
}

// SetExperimental sets the value of Experimental.
func (s *APIProblemPostReq) SetExperimental(val OptBool) {
	s.Experimental = val
}

// SetUserId sets the value of UserId.
func (s *APIProblemPostReq) SetUserId(val OptString) {
	s.UserId = val
}

type APIProblemPostReqFacetItem string

const (
	APIProblemPostReqFacetItemCategory   APIProblemPostReqFacetItem = "category"
	APIProblemPostReqFacetItemDifficulty APIProblemPostReqFacetItem = "difficulty"
)

// AllValues returns all APIProblemPostReqFacetItem values.
func (APIProblemPostReqFacetItem) AllValues() []APIProblemPostReqFacetItem {
	return []APIProblemPostReqFacetItem{
		APIProblemPostReqFacetItemCategory,
		APIProblemPostReqFacetItemDifficulty,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APIProblemPostReqFacetItem) MarshalText() ([]byte, error) {
	switch s {
	case APIProblemPostReqFacetItemCategory:
		return []byte(s), nil
	case APIProblemPostReqFacetItemDifficulty:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APIProblemPostReqFacetItem) UnmarshalText(data []byte) error {
	switch APIProblemPostReqFacetItem(data) {
	case APIProblemPostReqFacetItemCategory:
		*s = APIProblemPostReqFacetItemCategory
		return nil
	case APIProblemPostReqFacetItemDifficulty:
		*s = APIProblemPostReqFacetItemDifficulty
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIProblemPostReqSortItem string

const (
	APIProblemPostReqSortItemStartAtAsc     APIProblemPostReqSortItem = "startAt:asc"
	APIProblemPostReqSortItemStartAtDesc    APIProblemPostReqSortItem = "startAt:desc"
	APIProblemPostReqSortItemDifficultyAsc  APIProblemPostReqSortItem = "difficulty:asc"
	APIProblemPostReqSortItemDifficultyDesc APIProblemPostReqSortItem = "difficulty:desc"
	APIProblemPostReqSortItemProblemIdAsc   APIProblemPostReqSortItem = "problemId:asc"
	APIProblemPostReqSortItemProblemIdDesc  APIProblemPostReqSortItem = "problemId:desc"
)

// AllValues returns all APIProblemPostReqSortItem values.
func (APIProblemPostReqSortItem) AllValues() []APIProblemPostReqSortItem {
	return []APIProblemPostReqSortItem{
		APIProblemPostReqSortItemStartAtAsc,
		APIProblemPostReqSortItemStartAtDesc,
		APIProblemPostReqSortItemDifficultyAsc,
		APIProblemPostReqSortItemDifficultyDesc,
		APIProblemPostReqSortItemProblemIdAsc,
		APIProblemPostReqSortItemProblemIdDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APIProblemPostReqSortItem) MarshalText() ([]byte, error) {
	switch s {
	case APIProblemPostReqSortItemStartAtAsc:
		return []byte(s), nil
	case APIProblemPostReqSortItemStartAtDesc:
		return []byte(s), nil
	case APIProblemPostReqSortItemDifficultyAsc:
		return []byte(s), nil
	case APIProblemPostReqSortItemDifficultyDesc:
		return []byte(s), nil
	case APIProblemPostReqSortItemProblemIdAsc:
		return []byte(s), nil
	case APIProblemPostReqSortItemProblemIdDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APIProblemPostReqSortItem) UnmarshalText(data []byte) error {
	switch APIProblemPostReqSortItem(data) {
	case APIProblemPostReqSortItemStartAtAsc:
		*s = APIProblemPostReqSortItemStartAtAsc
		return nil
	case APIProblemPostReqSortItemStartAtDesc:
		*s = APIProblemPostReqSortItemStartAtDesc
		return nil
	case APIProblemPostReqSortItemDifficultyAsc:
		*s = APIProblemPostReqSortItemDifficultyAsc
		return nil
	case APIProblemPostReqSortItemDifficultyDesc:
		*s = APIProblemPostReqSortItemDifficultyDesc
		return nil
	case APIProblemPostReqSortItemProblemIdAsc:
		*s = APIProblemPostReqSortItemProblemIdAsc
		return nil
	case APIProblemPostReqSortItemProblemIdDesc:
		*s = APIProblemPostReqSortItemProblemIdDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APISubmissionPostOK struct {
	Time  int          `json:"time"`
	Items []Submission `json:"items"`
}

// GetTime returns the value of Time.
func (s *APISubmissionPostOK) GetTime() int {
	return s.Time
}

// GetItems returns the value of Items.
func (s *APISubmissionPostOK) GetItems() []Submission {
	return s.Items
}

// SetTime sets the value of Time.
func (s *APISubmissionPostOK) SetTime(val int) {
	s.Time = val
}

// SetItems sets the value of Items.
func (s *APISubmissionPostOK) SetItems(val []Submission) {
	s.Items = val
}

type APISubmissionPostReq struct {
	Limit         OptInt                         `json:"limit"`
	Page          OptInt                         `json:"page"`
	Sort          []APISubmissionPostReqSortItem `json:"sort"`
	EpochSecond   OptIntRange                    `json:"epochSecond"`
	ProblemId     []string                       `json:"problemId"`
	ContestId     []string                       `json:"contestId"`
	Category      []string                       `json:"category"`
	UserId        []string                       `json:"userId"`
	Language      []string                       `json:"language"`
	LanguageGroup []string                       `json:"languageGroup"`
	Point         OptFloatRange                  `json:"point"`
	Length        OptIntRange                    `json:"length"`
	Result        []string                       `json:"result"`
	ExecutionTime OptIntRange                    `json:"executionTime"`
}

// GetLimit returns the value of Limit.
func (s *APISubmissionPostReq) GetLimit() OptInt {
	return s.Limit
}

// GetPage returns the value of Page.
func (s *APISubmissionPostReq) GetPage() OptInt {
	return s.Page
}

// GetSort returns the value of Sort.
func (s *APISubmissionPostReq) GetSort() []APISubmissionPostReqSortItem {
	return s.Sort
}

// GetEpochSecond returns the value of EpochSecond.
func (s *APISubmissionPostReq) GetEpochSecond() OptIntRange {
	return s.EpochSecond
}

// GetProblemId returns the value of ProblemId.
func (s *APISubmissionPostReq) GetProblemId() []string {
	return s.ProblemId
}

// GetContestId returns the value of ContestId.
func (s *APISubmissionPostReq) GetContestId() []string {
	return s.ContestId
}

// GetCategory returns the value of Category.
func (s *APISubmissionPostReq) GetCategory() []string {
	return s.Category
}

// GetUserId returns the value of UserId.
func (s *APISubmissionPostReq) GetUserId() []string {
	return s.UserId
}

// GetLanguage returns the value of Language.
func (s *APISubmissionPostReq) GetLanguage() []string {
	return s.Language
}

// GetLanguageGroup returns the value of LanguageGroup.
func (s *APISubmissionPostReq) GetLanguageGroup() []string {
	return s.LanguageGroup
}

// GetPoint returns the value of Point.
func (s *APISubmissionPostReq) GetPoint() OptFloatRange {
	return s.Point
}

// GetLength returns the value of Length.
func (s *APISubmissionPostReq) GetLength() OptIntRange {
	return s.Length
}

// GetResult returns the value of Result.
func (s *APISubmissionPostReq) GetResult() []string {
	return s.Result
}

// GetExecutionTime returns the value of ExecutionTime.
func (s *APISubmissionPostReq) GetExecutionTime() OptIntRange {
	return s.ExecutionTime
}

// SetLimit sets the value of Limit.
func (s *APISubmissionPostReq) SetLimit(val OptInt) {
	s.Limit = val
}

// SetPage sets the value of Page.
func (s *APISubmissionPostReq) SetPage(val OptInt) {
	s.Page = val
}

// SetSort sets the value of Sort.
func (s *APISubmissionPostReq) SetSort(val []APISubmissionPostReqSortItem) {
	s.Sort = val
}

// SetEpochSecond sets the value of EpochSecond.
func (s *APISubmissionPostReq) SetEpochSecond(val OptIntRange) {
	s.EpochSecond = val
}

// SetProblemId sets the value of ProblemId.
func (s *APISubmissionPostReq) SetProblemId(val []string) {
	s.ProblemId = val
}

// SetContestId sets the value of ContestId.
func (s *APISubmissionPostReq) SetContestId(val []string) {
	s.ContestId = val
}

// SetCategory sets the value of Category.
func (s *APISubmissionPostReq) SetCategory(val []string) {
	s.Category = val
}

// SetUserId sets the value of UserId.
func (s *APISubmissionPostReq) SetUserId(val []string) {
	s.UserId = val
}

// SetLanguage sets the value of Language.
func (s *APISubmissionPostReq) SetLanguage(val []string) {
	s.Language = val
}

// SetLanguageGroup sets the value of LanguageGroup.
func (s *APISubmissionPostReq) SetLanguageGroup(val []string) {
	s.LanguageGroup = val
}

// SetPoint sets the value of Point.
func (s *APISubmissionPostReq) SetPoint(val OptFloatRange) {
	s.Point = val
}

// SetLength sets the value of Length.
func (s *APISubmissionPostReq) SetLength(val OptIntRange) {
	s.Length = val
}

// SetResult sets the value of Result.
func (s *APISubmissionPostReq) SetResult(val []string) {
	s.Result = val
}

// SetExecutionTime sets the value of ExecutionTime.
func (s *APISubmissionPostReq) SetExecutionTime(val OptIntRange) {
	s.ExecutionTime = val
}

type APISubmissionPostReqSortItem string

const (
	APISubmissionPostReqSortItemExecutionTimeAsc  APISubmissionPostReqSortItem = "executionTime:asc"
	APISubmissionPostReqSortItemExecutionTimeDesc APISubmissionPostReqSortItem = "executionTime:desc"
	APISubmissionPostReqSortItemEpochSecondAsc    APISubmissionPostReqSortItem = "epochSecond:asc"
	APISubmissionPostReqSortItemEpochSecondDesc   APISubmissionPostReqSortItem = "epochSecond:desc"
	APISubmissionPostReqSortItemPointAsc          APISubmissionPostReqSortItem = "point:asc"
	APISubmissionPostReqSortItemPointDesc         APISubmissionPostReqSortItem = "point:desc"
	APISubmissionPostReqSortItemLengthAsc         APISubmissionPostReqSortItem = "length:asc"
	APISubmissionPostReqSortItemLengthDesc        APISubmissionPostReqSortItem = "length:desc"
)

// AllValues returns all APISubmissionPostReqSortItem values.
func (APISubmissionPostReqSortItem) AllValues() []APISubmissionPostReqSortItem {
	return []APISubmissionPostReqSortItem{
		APISubmissionPostReqSortItemExecutionTimeAsc,
		APISubmissionPostReqSortItemExecutionTimeDesc,
		APISubmissionPostReqSortItemEpochSecondAsc,
		APISubmissionPostReqSortItemEpochSecondDesc,
		APISubmissionPostReqSortItemPointAsc,
		APISubmissionPostReqSortItemPointDesc,
		APISubmissionPostReqSortItemLengthAsc,
		APISubmissionPostReqSortItemLengthDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APISubmissionPostReqSortItem) MarshalText() ([]byte, error) {
	switch s {
	case APISubmissionPostReqSortItemExecutionTimeAsc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemExecutionTimeDesc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemEpochSecondAsc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemEpochSecondDesc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemPointAsc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemPointDesc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemLengthAsc:
		return []byte(s), nil
	case APISubmissionPostReqSortItemLengthDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APISubmissionPostReqSortItem) UnmarshalText(data []byte) error {
	switch APISubmissionPostReqSortItem(data) {
	case APISubmissionPostReqSortItemExecutionTimeAsc:
		*s = APISubmissionPostReqSortItemExecutionTimeAsc
		return nil
	case APISubmissionPostReqSortItemExecutionTimeDesc:
		*s = APISubmissionPostReqSortItemExecutionTimeDesc
		return nil
	case APISubmissionPostReqSortItemEpochSecondAsc:
		*s = APISubmissionPostReqSortItemEpochSecondAsc
		return nil
	case APISubmissionPostReqSortItemEpochSecondDesc:
		*s = APISubmissionPostReqSortItemEpochSecondDesc
		return nil
	case APISubmissionPostReqSortItemPointAsc:
		*s = APISubmissionPostReqSortItemPointAsc
		return nil
	case APISubmissionPostReqSortItemPointDesc:
		*s = APISubmissionPostReqSortItemPointDesc
		return nil
	case APISubmissionPostReqSortItemLengthAsc:
		*s = APISubmissionPostReqSortItemLengthAsc
		return nil
	case APISubmissionPostReqSortItemLengthDesc:
		*s = APISubmissionPostReqSortItemLengthDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIUserPostOK struct {
	Time  int                `json:"time"`
	Total int                `json:"total"`
	Pages int                `json:"pages"`
	Index int                `json:"index"`
	Items []User             `json:"items"`
	Facet APIUserPostOKFacet `json:"facet"`
}

// GetTime returns the value of Time.
func (s *APIUserPostOK) GetTime() int {
	return s.Time
}

// GetTotal returns the value of Total.
func (s *APIUserPostOK) GetTotal() int {
	return s.Total
}

// GetPages returns the value of Pages.
func (s *APIUserPostOK) GetPages() int {
	return s.Pages
}

// GetIndex returns the value of Index.
func (s *APIUserPostOK) GetIndex() int {
	return s.Index
}

// GetItems returns the value of Items.
func (s *APIUserPostOK) GetItems() []User {
	return s.Items
}

// GetFacet returns the value of Facet.
func (s *APIUserPostOK) GetFacet() APIUserPostOKFacet {
	return s.Facet
}

// SetTime sets the value of Time.
func (s *APIUserPostOK) SetTime(val int) {
	s.Time = val
}

// SetTotal sets the value of Total.
func (s *APIUserPostOK) SetTotal(val int) {
	s.Total = val
}

// SetPages sets the value of Pages.
func (s *APIUserPostOK) SetPages(val int) {
	s.Pages = val
}

// SetIndex sets the value of Index.
func (s *APIUserPostOK) SetIndex(val int) {
	s.Index = val
}

// SetItems sets the value of Items.
func (s *APIUserPostOK) SetItems(val []User) {
	s.Items = val
}

// SetFacet sets the value of Facet.
func (s *APIUserPostOK) SetFacet(val APIUserPostOKFacet) {
	s.Facet = val
}

type APIUserPostOKFacet map[string][]Count

func (s *APIUserPostOKFacet) init() APIUserPostOKFacet {
	m := *s
	if m == nil {
		m = map[string][]Count{}
		*s = m
	}
	return m
}

type APIUserPostReq struct {
	Q         OptString                 `json:"q"`
	Limit     OptInt                    `json:"limit"`
	Page      OptInt                    `json:"page"`
	Sort      []APIUserPostReqSortItem  `json:"sort"`
	Facet     []APIUserPostReqFacetItem `json:"facet"`
	UserId    []string                  `json:"userId"`
	Rating    OptIntRange               `json:"rating"`
	BirthYear OptIntRange               `json:"birthYear"`
	JoinCount OptIntRange               `json:"joinCount"`
	Country   []string                  `json:"country"`
}

// GetQ returns the value of Q.
func (s *APIUserPostReq) GetQ() OptString {
	return s.Q
}

// GetLimit returns the value of Limit.
func (s *APIUserPostReq) GetLimit() OptInt {
	return s.Limit
}

// GetPage returns the value of Page.
func (s *APIUserPostReq) GetPage() OptInt {
	return s.Page
}

// GetSort returns the value of Sort.
func (s *APIUserPostReq) GetSort() []APIUserPostReqSortItem {
	return s.Sort
}

// GetFacet returns the value of Facet.
func (s *APIUserPostReq) GetFacet() []APIUserPostReqFacetItem {
	return s.Facet
}

// GetUserId returns the value of UserId.
func (s *APIUserPostReq) GetUserId() []string {
	return s.UserId
}

// GetRating returns the value of Rating.
func (s *APIUserPostReq) GetRating() OptIntRange {
	return s.Rating
}

// GetBirthYear returns the value of BirthYear.
func (s *APIUserPostReq) GetBirthYear() OptIntRange {
	return s.BirthYear
}

// GetJoinCount returns the value of JoinCount.
func (s *APIUserPostReq) GetJoinCount() OptIntRange {
	return s.JoinCount
}

// GetCountry returns the value of Country.
func (s *APIUserPostReq) GetCountry() []string {
	return s.Country
}

// SetQ sets the value of Q.
func (s *APIUserPostReq) SetQ(val OptString) {
	s.Q = val
}

// SetLimit sets the value of Limit.
func (s *APIUserPostReq) SetLimit(val OptInt) {
	s.Limit = val
}

// SetPage sets the value of Page.
func (s *APIUserPostReq) SetPage(val OptInt) {
	s.Page = val
}

// SetSort sets the value of Sort.
func (s *APIUserPostReq) SetSort(val []APIUserPostReqSortItem) {
	s.Sort = val
}

// SetFacet sets the value of Facet.
func (s *APIUserPostReq) SetFacet(val []APIUserPostReqFacetItem) {
	s.Facet = val
}

// SetUserId sets the value of UserId.
func (s *APIUserPostReq) SetUserId(val []string) {
	s.UserId = val
}

// SetRating sets the value of Rating.
func (s *APIUserPostReq) SetRating(val OptIntRange) {
	s.Rating = val
}

// SetBirthYear sets the value of BirthYear.
func (s *APIUserPostReq) SetBirthYear(val OptIntRange) {
	s.BirthYear = val
}

// SetJoinCount sets the value of JoinCount.
func (s *APIUserPostReq) SetJoinCount(val OptIntRange) {
	s.JoinCount = val
}

// SetCountry sets the value of Country.
func (s *APIUserPostReq) SetCountry(val []string) {
	s.Country = val
}

type APIUserPostReqFacetItem string

const (
	APIUserPostReqFacetItemCountry   APIUserPostReqFacetItem = "country"
	APIUserPostReqFacetItemRating    APIUserPostReqFacetItem = "rating"
	APIUserPostReqFacetItemBirthYear APIUserPostReqFacetItem = "birthYear"
	APIUserPostReqFacetItemJoinCount APIUserPostReqFacetItem = "joinCount"
)

// AllValues returns all APIUserPostReqFacetItem values.
func (APIUserPostReqFacetItem) AllValues() []APIUserPostReqFacetItem {
	return []APIUserPostReqFacetItem{
		APIUserPostReqFacetItemCountry,
		APIUserPostReqFacetItemRating,
		APIUserPostReqFacetItemBirthYear,
		APIUserPostReqFacetItemJoinCount,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APIUserPostReqFacetItem) MarshalText() ([]byte, error) {
	switch s {
	case APIUserPostReqFacetItemCountry:
		return []byte(s), nil
	case APIUserPostReqFacetItemRating:
		return []byte(s), nil
	case APIUserPostReqFacetItemBirthYear:
		return []byte(s), nil
	case APIUserPostReqFacetItemJoinCount:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APIUserPostReqFacetItem) UnmarshalText(data []byte) error {
	switch APIUserPostReqFacetItem(data) {
	case APIUserPostReqFacetItemCountry:
		*s = APIUserPostReqFacetItemCountry
		return nil
	case APIUserPostReqFacetItemRating:
		*s = APIUserPostReqFacetItemRating
		return nil
	case APIUserPostReqFacetItemBirthYear:
		*s = APIUserPostReqFacetItemBirthYear
		return nil
	case APIUserPostReqFacetItemJoinCount:
		*s = APIUserPostReqFacetItemJoinCount
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type APIUserPostReqSortItem string

const (
	APIUserPostReqSortItemRatingAsc     APIUserPostReqSortItem = "rating:asc"
	APIUserPostReqSortItemRatingDesc    APIUserPostReqSortItem = "rating:desc"
	APIUserPostReqSortItemBirthYearAsc  APIUserPostReqSortItem = "birthYear:asc"
	APIUserPostReqSortItemBirthYearDesc APIUserPostReqSortItem = "birthYear:desc"
	APIUserPostReqSortItemJoinCountAsc  APIUserPostReqSortItem = "joinCount:asc"
	APIUserPostReqSortItemJoinCountDesc APIUserPostReqSortItem = "joinCount:desc"
	APIUserPostReqSortItemUserIdAsc     APIUserPostReqSortItem = "userId:asc"
	APIUserPostReqSortItemUserIdDesc    APIUserPostReqSortItem = "userId:desc"
)

// AllValues returns all APIUserPostReqSortItem values.
func (APIUserPostReqSortItem) AllValues() []APIUserPostReqSortItem {
	return []APIUserPostReqSortItem{
		APIUserPostReqSortItemRatingAsc,
		APIUserPostReqSortItemRatingDesc,
		APIUserPostReqSortItemBirthYearAsc,
		APIUserPostReqSortItemBirthYearDesc,
		APIUserPostReqSortItemJoinCountAsc,
		APIUserPostReqSortItemJoinCountDesc,
		APIUserPostReqSortItemUserIdAsc,
		APIUserPostReqSortItemUserIdDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s APIUserPostReqSortItem) MarshalText() ([]byte, error) {
	switch s {
	case APIUserPostReqSortItemRatingAsc:
		return []byte(s), nil
	case APIUserPostReqSortItemRatingDesc:
		return []byte(s), nil
	case APIUserPostReqSortItemBirthYearAsc:
		return []byte(s), nil
	case APIUserPostReqSortItemBirthYearDesc:
		return []byte(s), nil
	case APIUserPostReqSortItemJoinCountAsc:
		return []byte(s), nil
	case APIUserPostReqSortItemJoinCountDesc:
		return []byte(s), nil
	case APIUserPostReqSortItemUserIdAsc:
		return []byte(s), nil
	case APIUserPostReqSortItemUserIdDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *APIUserPostReqSortItem) UnmarshalText(data []byte) error {
	switch APIUserPostReqSortItem(data) {
	case APIUserPostReqSortItemRatingAsc:
		*s = APIUserPostReqSortItemRatingAsc
		return nil
	case APIUserPostReqSortItemRatingDesc:
		*s = APIUserPostReqSortItemRatingDesc
		return nil
	case APIUserPostReqSortItemBirthYearAsc:
		*s = APIUserPostReqSortItemBirthYearAsc
		return nil
	case APIUserPostReqSortItemBirthYearDesc:
		*s = APIUserPostReqSortItemBirthYearDesc
		return nil
	case APIUserPostReqSortItemJoinCountAsc:
		*s = APIUserPostReqSortItemJoinCountAsc
		return nil
	case APIUserPostReqSortItemJoinCountDesc:
		*s = APIUserPostReqSortItemJoinCountDesc
		return nil
	case APIUserPostReqSortItemUserIdAsc:
		*s = APIUserPostReqSortItemUserIdAsc
		return nil
	case APIUserPostReqSortItemUserIdDesc:
		*s = APIUserPostReqSortItemUserIdDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Count
type Count struct {
	Label string `json:"label"`
	Count int    `json:"count"`
}

// GetLabel returns the value of Label.
func (s *Count) GetLabel() string {
	return s.Label
}

// GetCount returns the value of Count.
func (s *Count) GetCount() int {
	return s.Count
}

// SetLabel sets the value of Label.
func (s *Count) SetLabel(val string) {
	s.Label = val
}

// SetCount sets the value of Count.
func (s *Count) SetCount(val int) {
	s.Count = val
}

// Ref: #/components/schemas/FloatRange
type FloatRange struct {
	From OptFloat64 `json:"from"`
	To   OptFloat64 `json:"to"`
}

// GetFrom returns the value of From.
func (s *FloatRange) GetFrom() OptFloat64 {
	return s.From
}

// GetTo returns the value of To.
func (s *FloatRange) GetTo() OptFloat64 {
	return s.To
}

// SetFrom sets the value of From.
func (s *FloatRange) SetFrom(val OptFloat64) {
	s.From = val
}

// SetTo sets the value of To.
func (s *FloatRange) SetTo(val OptFloat64) {
	s.To = val
}

// Ref: #/components/schemas/IntRange
type IntRange struct {
	From OptInt `json:"from"`
	To   OptInt `json:"to"`
}

// GetFrom returns the value of From.
func (s *IntRange) GetFrom() OptInt {
	return s.From
}

// GetTo returns the value of To.
func (s *IntRange) GetTo() OptInt {
	return s.To
}

// SetFrom sets the value of From.
func (s *IntRange) SetFrom(val OptInt) {
	s.From = val
}

// SetTo sets the value of To.
func (s *IntRange) SetTo(val OptInt) {
	s.To = val
}

// Ref: #/components/schemas/Language
type Language struct {
	Group     string   `json:"group"`
	Languages []string `json:"languages"`
}

// GetGroup returns the value of Group.
func (s *Language) GetGroup() string {
	return s.Group
}

// GetLanguages returns the value of Languages.
func (s *Language) GetLanguages() []string {
	return s.Languages
}

// SetGroup sets the value of Group.
func (s *Language) SetGroup(val string) {
	s.Group = val
}

// SetLanguages sets the value of Languages.
func (s *Language) SetLanguages(val []string) {
	s.Languages = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloatRange returns new OptFloatRange with value set to v.
func NewOptFloatRange(v FloatRange) OptFloatRange {
	return OptFloatRange{
		Value: v,
		Set:   true,
	}
}

// OptFloatRange is optional FloatRange.
type OptFloatRange struct {
	Value FloatRange
	Set   bool
}

// IsSet returns true if OptFloatRange was set.
func (o OptFloatRange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloatRange) Reset() {
	var v FloatRange
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloatRange) SetTo(v FloatRange) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloatRange) Get() (v FloatRange, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloatRange) Or(d FloatRange) FloatRange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptIntRange returns new OptIntRange with value set to v.
func NewOptIntRange(v IntRange) OptIntRange {
	return OptIntRange{
		Value: v,
		Set:   true,
	}
}

// OptIntRange is optional IntRange.
type OptIntRange struct {
	Value IntRange
	Set   bool
}

// IsSet returns true if OptIntRange was set.
func (o OptIntRange) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptIntRange) Reset() {
	var v IntRange
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptIntRange) SetTo(v IntRange) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptIntRange) Get() (v IntRange, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptIntRange) Or(d IntRange) IntRange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Problem
type Problem struct {
	ProblemId      string `json:"problemId"`
	ProblemTitle   string `json:"problemTitle"`
	ProblemUrl     string `json:"problemUrl"`
	ContestId      string `json:"contestId"`
	ContestTitle   string `json:"contestTitle"`
	ContestUrl     string `json:"contestUrl"`
	Difficulty     OptInt `json:"difficulty"`
	StartAt        int    `json:"startAt"`
	Duration       int    `json:"duration"`
	RateChange     string `json:"rateChange"`
	Category       string `json:"category"`
	IsExperimental bool   `json:"isExperimental"`
}

// GetProblemId returns the value of ProblemId.
func (s *Problem) GetProblemId() string {
	return s.ProblemId
}

// GetProblemTitle returns the value of ProblemTitle.
func (s *Problem) GetProblemTitle() string {
	return s.ProblemTitle
}

// GetProblemUrl returns the value of ProblemUrl.
func (s *Problem) GetProblemUrl() string {
	return s.ProblemUrl
}

// GetContestId returns the value of ContestId.
func (s *Problem) GetContestId() string {
	return s.ContestId
}

// GetContestTitle returns the value of ContestTitle.
func (s *Problem) GetContestTitle() string {
	return s.ContestTitle
}

// GetContestUrl returns the value of ContestUrl.
func (s *Problem) GetContestUrl() string {
	return s.ContestUrl
}

// GetDifficulty returns the value of Difficulty.
func (s *Problem) GetDifficulty() OptInt {
	return s.Difficulty
}

// GetStartAt returns the value of StartAt.
func (s *Problem) GetStartAt() int {
	return s.StartAt
}

// GetDuration returns the value of Duration.
func (s *Problem) GetDuration() int {
	return s.Duration
}

// GetRateChange returns the value of RateChange.
func (s *Problem) GetRateChange() string {
	return s.RateChange
}

// GetCategory returns the value of Category.
func (s *Problem) GetCategory() string {
	return s.Category
}

// GetIsExperimental returns the value of IsExperimental.
func (s *Problem) GetIsExperimental() bool {
	return s.IsExperimental
}

// SetProblemId sets the value of ProblemId.
func (s *Problem) SetProblemId(val string) {
	s.ProblemId = val
}

// SetProblemTitle sets the value of ProblemTitle.
func (s *Problem) SetProblemTitle(val string) {
	s.ProblemTitle = val
}

// SetProblemUrl sets the value of ProblemUrl.
func (s *Problem) SetProblemUrl(val string) {
	s.ProblemUrl = val
}

// SetContestId sets the value of ContestId.
func (s *Problem) SetContestId(val string) {
	s.ContestId = val
}

// SetContestTitle sets the value of ContestTitle.
func (s *Problem) SetContestTitle(val string) {
	s.ContestTitle = val
}

// SetContestUrl sets the value of ContestUrl.
func (s *Problem) SetContestUrl(val string) {
	s.ContestUrl = val
}

// SetDifficulty sets the value of Difficulty.
func (s *Problem) SetDifficulty(val OptInt) {
	s.Difficulty = val
}

// SetStartAt sets the value of StartAt.
func (s *Problem) SetStartAt(val int) {
	s.StartAt = val
}

// SetDuration sets the value of Duration.
func (s *Problem) SetDuration(val int) {
	s.Duration = val
}

// SetRateChange sets the value of RateChange.
func (s *Problem) SetRateChange(val string) {
	s.RateChange = val
}

// SetCategory sets the value of Category.
func (s *Problem) SetCategory(val string) {
	s.Category = val
}

// SetIsExperimental sets the value of IsExperimental.
func (s *Problem) SetIsExperimental(val bool) {
	s.IsExperimental = val
}

// Ref: #/components/schemas/Submission
type Submission struct {
	SubmissionId  int     `json:"submissionId"`
	SubmittedAt   int     `json:"submittedAt"`
	SubmissionUrl string  `json:"submissionUrl"`
	ProblemId     string  `json:"problemId"`
	ProblemTitle  string  `json:"problemTitle"`
	ProblemUrl    string  `json:"problemUrl"`
	ContestId     string  `json:"contestId"`
	ContestTitle  string  `json:"contestTitle"`
	ContestUrl    string  `json:"contestUrl"`
	Category      string  `json:"category"`
	Difficulty    OptInt  `json:"difficulty"`
	UserId        string  `json:"userId"`
	Language      string  `json:"language"`
	LanguageGroup string  `json:"languageGroup"`
	Point         float64 `json:"point"`
	Length        int     `json:"length"`
	Result        string  `json:"result"`
	ExecutionTime OptInt  `json:"executionTime"`
}

// GetSubmissionId returns the value of SubmissionId.
func (s *Submission) GetSubmissionId() int {
	return s.SubmissionId
}

// GetSubmittedAt returns the value of SubmittedAt.
func (s *Submission) GetSubmittedAt() int {
	return s.SubmittedAt
}

// GetSubmissionUrl returns the value of SubmissionUrl.
func (s *Submission) GetSubmissionUrl() string {
	return s.SubmissionUrl
}

// GetProblemId returns the value of ProblemId.
func (s *Submission) GetProblemId() string {
	return s.ProblemId
}

// GetProblemTitle returns the value of ProblemTitle.
func (s *Submission) GetProblemTitle() string {
	return s.ProblemTitle
}

// GetProblemUrl returns the value of ProblemUrl.
func (s *Submission) GetProblemUrl() string {
	return s.ProblemUrl
}

// GetContestId returns the value of ContestId.
func (s *Submission) GetContestId() string {
	return s.ContestId
}

// GetContestTitle returns the value of ContestTitle.
func (s *Submission) GetContestTitle() string {
	return s.ContestTitle
}

// GetContestUrl returns the value of ContestUrl.
func (s *Submission) GetContestUrl() string {
	return s.ContestUrl
}

// GetCategory returns the value of Category.
func (s *Submission) GetCategory() string {
	return s.Category
}

// GetDifficulty returns the value of Difficulty.
func (s *Submission) GetDifficulty() OptInt {
	return s.Difficulty
}

// GetUserId returns the value of UserId.
func (s *Submission) GetUserId() string {
	return s.UserId
}

// GetLanguage returns the value of Language.
func (s *Submission) GetLanguage() string {
	return s.Language
}

// GetLanguageGroup returns the value of LanguageGroup.
func (s *Submission) GetLanguageGroup() string {
	return s.LanguageGroup
}

// GetPoint returns the value of Point.
func (s *Submission) GetPoint() float64 {
	return s.Point
}

// GetLength returns the value of Length.
func (s *Submission) GetLength() int {
	return s.Length
}

// GetResult returns the value of Result.
func (s *Submission) GetResult() string {
	return s.Result
}

// GetExecutionTime returns the value of ExecutionTime.
func (s *Submission) GetExecutionTime() OptInt {
	return s.ExecutionTime
}

// SetSubmissionId sets the value of SubmissionId.
func (s *Submission) SetSubmissionId(val int) {
	s.SubmissionId = val
}

// SetSubmittedAt sets the value of SubmittedAt.
func (s *Submission) SetSubmittedAt(val int) {
	s.SubmittedAt = val
}

// SetSubmissionUrl sets the value of SubmissionUrl.
func (s *Submission) SetSubmissionUrl(val string) {
	s.SubmissionUrl = val
}

// SetProblemId sets the value of ProblemId.
func (s *Submission) SetProblemId(val string) {
	s.ProblemId = val
}

// SetProblemTitle sets the value of ProblemTitle.
func (s *Submission) SetProblemTitle(val string) {
	s.ProblemTitle = val
}

// SetProblemUrl sets the value of ProblemUrl.
func (s *Submission) SetProblemUrl(val string) {
	s.ProblemUrl = val
}

// SetContestId sets the value of ContestId.
func (s *Submission) SetContestId(val string) {
	s.ContestId = val
}

// SetContestTitle sets the value of ContestTitle.
func (s *Submission) SetContestTitle(val string) {
	s.ContestTitle = val
}

// SetContestUrl sets the value of ContestUrl.
func (s *Submission) SetContestUrl(val string) {
	s.ContestUrl = val
}

// SetCategory sets the value of Category.
func (s *Submission) SetCategory(val string) {
	s.Category = val
}

// SetDifficulty sets the value of Difficulty.
func (s *Submission) SetDifficulty(val OptInt) {
	s.Difficulty = val
}

// SetUserId sets the value of UserId.
func (s *Submission) SetUserId(val string) {
	s.UserId = val
}

// SetLanguage sets the value of Language.
func (s *Submission) SetLanguage(val string) {
	s.Language = val
}

// SetLanguageGroup sets the value of LanguageGroup.
func (s *Submission) SetLanguageGroup(val string) {
	s.LanguageGroup = val
}

// SetPoint sets the value of Point.
func (s *Submission) SetPoint(val float64) {
	s.Point = val
}

// SetLength sets the value of Length.
func (s *Submission) SetLength(val int) {
	s.Length = val
}

// SetResult sets the value of Result.
func (s *Submission) SetResult(val string) {
	s.Result = val
}

// SetExecutionTime sets the value of ExecutionTime.
func (s *Submission) SetExecutionTime(val OptInt) {
	s.ExecutionTime = val
}

// Ref: #/components/schemas/User
type User struct {
	UserId        string    `json:"userId"`
	Rating        int       `json:"rating"`
	HighestRating int       `json:"highestRating"`
	Affiliation   OptString `json:"affiliation"`
	BirthYear     OptInt    `json:"birthYear"`
	Country       OptString `json:"country"`
	Crown         OptString `json:"crown"`
	JoinCount     int       `json:"joinCount"`
	Rank          int       `json:"rank"`
	ActiveRank    OptInt    `json:"activeRank"`
	Wins          int       `json:"wins"`
	UserUrl       string    `json:"userUrl"`
}

// GetUserId returns the value of UserId.
func (s *User) GetUserId() string {
	return s.UserId
}

// GetRating returns the value of Rating.
func (s *User) GetRating() int {
	return s.Rating
}

// GetHighestRating returns the value of HighestRating.
func (s *User) GetHighestRating() int {
	return s.HighestRating
}

// GetAffiliation returns the value of Affiliation.
func (s *User) GetAffiliation() OptString {
	return s.Affiliation
}

// GetBirthYear returns the value of BirthYear.
func (s *User) GetBirthYear() OptInt {
	return s.BirthYear
}

// GetCountry returns the value of Country.
func (s *User) GetCountry() OptString {
	return s.Country
}

// GetCrown returns the value of Crown.
func (s *User) GetCrown() OptString {
	return s.Crown
}

// GetJoinCount returns the value of JoinCount.
func (s *User) GetJoinCount() int {
	return s.JoinCount
}

// GetRank returns the value of Rank.
func (s *User) GetRank() int {
	return s.Rank
}

// GetActiveRank returns the value of ActiveRank.
func (s *User) GetActiveRank() OptInt {
	return s.ActiveRank
}

// GetWins returns the value of Wins.
func (s *User) GetWins() int {
	return s.Wins
}

// GetUserUrl returns the value of UserUrl.
func (s *User) GetUserUrl() string {
	return s.UserUrl
}

// SetUserId sets the value of UserId.
func (s *User) SetUserId(val string) {
	s.UserId = val
}

// SetRating sets the value of Rating.
func (s *User) SetRating(val int) {
	s.Rating = val
}

// SetHighestRating sets the value of HighestRating.
func (s *User) SetHighestRating(val int) {
	s.HighestRating = val
}

// SetAffiliation sets the value of Affiliation.
func (s *User) SetAffiliation(val OptString) {
	s.Affiliation = val
}

// SetBirthYear sets the value of BirthYear.
func (s *User) SetBirthYear(val OptInt) {
	s.BirthYear = val
}

// SetCountry sets the value of Country.
func (s *User) SetCountry(val OptString) {
	s.Country = val
}

// SetCrown sets the value of Crown.
func (s *User) SetCrown(val OptString) {
	s.Crown = val
}

// SetJoinCount sets the value of JoinCount.
func (s *User) SetJoinCount(val int) {
	s.JoinCount = val
}

// SetRank sets the value of Rank.
func (s *User) SetRank(val int) {
	s.Rank = val
}

// SetActiveRank sets the value of ActiveRank.
func (s *User) SetActiveRank(val OptInt) {
	s.ActiveRank = val
}

// SetWins sets the value of Wins.
func (s *User) SetWins(val int) {
	s.Wins = val
}

// SetUserUrl sets the value of UserUrl.
func (s *User) SetUserUrl(val string) {
	s.UserUrl = val
}
