// Code generated by MockGen. DO NOT EDIT.
// Source: difficulty.go
//
// Generated by this command:
//
//	mockgen -source=difficulty.go -destination=./mock/mock_difficulty.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	repository "fjnkt98/atcodersearch/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDifficultyRepository is a mock of DifficultyRepository interface.
type MockDifficultyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDifficultyRepositoryMockRecorder
}

// MockDifficultyRepositoryMockRecorder is the mock recorder for MockDifficultyRepository.
type MockDifficultyRepositoryMockRecorder struct {
	mock *MockDifficultyRepository
}

// NewMockDifficultyRepository creates a new mock instance.
func NewMockDifficultyRepository(ctrl *gomock.Controller) *MockDifficultyRepository {
	mock := &MockDifficultyRepository{ctrl: ctrl}
	mock.recorder = &MockDifficultyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDifficultyRepository) EXPECT() *MockDifficultyRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockDifficultyRepository) Save(ctx context.Context, difficulties []repository.Difficulty) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, difficulties)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDifficultyRepositoryMockRecorder) Save(ctx, difficulties any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDifficultyRepository)(nil).Save), ctx, difficulties)
}
