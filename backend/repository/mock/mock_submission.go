// Code generated by MockGen. DO NOT EDIT.
// Source: submission.go
//
// Generated by this command:
//
//	mockgen -source=submission.go -destination=./mock/mock_submission.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	repository "fjnkt98/atcodersearch/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubmissionRepository is a mock of SubmissionRepository interface.
type MockSubmissionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionRepositoryMockRecorder
}

// MockSubmissionRepositoryMockRecorder is the mock recorder for MockSubmissionRepository.
type MockSubmissionRepositoryMockRecorder struct {
	mock *MockSubmissionRepository
}

// NewMockSubmissionRepository creates a new mock instance.
func NewMockSubmissionRepository(ctrl *gomock.Controller) *MockSubmissionRepository {
	mock := &MockSubmissionRepository{ctrl: ctrl}
	mock.recorder = &MockSubmissionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionRepository) EXPECT() *MockSubmissionRepositoryMockRecorder {
	return m.recorder
}

// FetchLanguages mocks base method.
func (m *MockSubmissionRepository) FetchLanguages(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLanguages", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLanguages indicates an expected call of FetchLanguages.
func (mr *MockSubmissionRepositoryMockRecorder) FetchLanguages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLanguages", reflect.TypeOf((*MockSubmissionRepository)(nil).FetchLanguages), ctx)
}

// Save mocks base method.
func (m *MockSubmissionRepository) Save(ctx context.Context, submissions []repository.Submission) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, submissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSubmissionRepositoryMockRecorder) Save(ctx, submissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSubmissionRepository)(nil).Save), ctx, submissions)
}
