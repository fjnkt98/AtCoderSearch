// Code generated by MockGen. DO NOT EDIT.
// Source: history.go
//
// Generated by this command:
//
//	mockgen -source=history.go -destination=./mock/mock_history.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	repository "fjnkt98/atcodersearch/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSubmissionCrawlHistoryRepository is a mock of SubmissionCrawlHistoryRepository interface.
type MockSubmissionCrawlHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionCrawlHistoryRepositoryMockRecorder
}

// MockSubmissionCrawlHistoryRepositoryMockRecorder is the mock recorder for MockSubmissionCrawlHistoryRepository.
type MockSubmissionCrawlHistoryRepositoryMockRecorder struct {
	mock *MockSubmissionCrawlHistoryRepository
}

// NewMockSubmissionCrawlHistoryRepository creates a new mock instance.
func NewMockSubmissionCrawlHistoryRepository(ctrl *gomock.Controller) *MockSubmissionCrawlHistoryRepository {
	mock := &MockSubmissionCrawlHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSubmissionCrawlHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionCrawlHistoryRepository) EXPECT() *MockSubmissionCrawlHistoryRepositoryMockRecorder {
	return m.recorder
}

// GetLatestHistory mocks base method.
func (m *MockSubmissionCrawlHistoryRepository) GetLatestHistory(ctx context.Context, contestID string) (repository.SubmissionCrawlHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestHistory", ctx, contestID)
	ret0, _ := ret[0].(repository.SubmissionCrawlHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestHistory indicates an expected call of GetLatestHistory.
func (mr *MockSubmissionCrawlHistoryRepositoryMockRecorder) GetLatestHistory(ctx, contestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestHistory", reflect.TypeOf((*MockSubmissionCrawlHistoryRepository)(nil).GetLatestHistory), ctx, contestID)
}

// Save mocks base method.
func (m *MockSubmissionCrawlHistoryRepository) Save(ctx context.Context, history repository.SubmissionCrawlHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSubmissionCrawlHistoryRepositoryMockRecorder) Save(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSubmissionCrawlHistoryRepository)(nil).Save), ctx, history)
}

// MockUpdateHistoryRepository is a mock of UpdateHistoryRepository interface.
type MockUpdateHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateHistoryRepositoryMockRecorder
}

// MockUpdateHistoryRepositoryMockRecorder is the mock recorder for MockUpdateHistoryRepository.
type MockUpdateHistoryRepositoryMockRecorder struct {
	mock *MockUpdateHistoryRepository
}

// NewMockUpdateHistoryRepository creates a new mock instance.
func NewMockUpdateHistoryRepository(ctrl *gomock.Controller) *MockUpdateHistoryRepository {
	mock := &MockUpdateHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockUpdateHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateHistoryRepository) EXPECT() *MockUpdateHistoryRepositoryMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockUpdateHistoryRepository) Cancel(ctx context.Context, history *repository.UpdateHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockUpdateHistoryRepositoryMockRecorder) Cancel(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockUpdateHistoryRepository)(nil).Cancel), ctx, history)
}

// Finish mocks base method.
func (m *MockUpdateHistoryRepository) Finish(ctx context.Context, history *repository.UpdateHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", ctx, history)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockUpdateHistoryRepositoryMockRecorder) Finish(ctx, history any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockUpdateHistoryRepository)(nil).Finish), ctx, history)
}

// GetLatest mocks base method.
func (m *MockUpdateHistoryRepository) GetLatest(ctx context.Context, domain string) (repository.UpdateHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest", ctx, domain)
	ret0, _ := ret[0].(repository.UpdateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockUpdateHistoryRepositoryMockRecorder) GetLatest(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockUpdateHistoryRepository)(nil).GetLatest), ctx, domain)
}
